- flakes that are paths relative to %ANYSNAKE_ROOT% ?

- poetry project in subdirectory of repo. poetry project in subdir, editable.
  (niche use case?)

- clear up when we're using the github api and when we're doing git ls-remote
	(we're using the github api soley for tag listing. We could remove it, but should we?)

- under what circumstances do we rebuild the editable packages?
  does that still happen every time we change the python packages?
  Yes, that's still happening every time we change add/remove/change any python dependency.
  I guess it's not wrong, though probably not doing it would be fine most of the time as well.


- evaluate shpool as dtach replacement
 - the big advantage might be that it captures/caches the output, so if you reconnect later, bingo :).
 - the disavantage is that we need to name the sessions - but then they won't polute the local folders on 
   unexpected reboot? we also need to filter them for 'pr attach'.
 - I think it runs a per user daemon? At least there's no nix systemd wrapper
   Yeah, they suggest a user systemd job. Home-manager also has no such wrapper.
 - calling arbitrary programs with arguments seems troublesome, there's no '--' for -c
   and it needs absolute binary path? and then it can't find argument file (directory issue?)
 - my biggest dtach pet peeve is that I need to scroll up after a command / the screen clear behaviour. 
 - the biggest advantage of shpool is the output caching.
 - abduco, dtach and diss have no output caching. Diss is essentialy rust based dtach.
 - shpool apperantly needs 10k memory per line of output cached?! and it defaults to storing just the screen.
 -> not worth replacing dtach.


- either switch from singularity, or find another way to get around the mount issues: https://github.com/NixOS/nixpkgs/pull/293787 so we can get this thing to 24.05. 23.05 already complains as well.


-- garbage collection for poetry clones?


-- when passing a url to a python package, uv fetches it, then nix fetches it again.
   Perhaps we can prefetch it, then have uv lock read the nix store path for the wheel?
   (currently this also means we're refetching the 180mb torch wheel on every lock...)
   (why was it not suing the wheel before though?. Ah no, the problem is that torch 2.4.1 wanted cuda 9,
   and nixos 24.05 only had cuda 8.9



- python build_system_overrides get added to ansynake overrieds - should the be in local_user_overrides instead?


-- we have a editable problem,
e.g. diopy={build_systems = ["setuptools"], url= "github:TyberiusPrime/diopy/fix_scipy/79b720c46318fb1d390b12fa268846a5828a8700",editable=true}
leads to a sys.path entry of '/project/import __editable___diopy_0_4_0_finder; __editable___diopy_0_4_0_finder.install()' which then can't be found and pulls the site-packages one we used during setup.

