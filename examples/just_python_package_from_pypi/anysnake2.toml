# pull a python package that has a complicated build process
# and has a flake.nix
# (since mach-nix doesn't do pep517 so far, and anyhow,
# for rust-packages you do need to nix-aware-fetch the cargo dependencies)
# )
# The flake exports a function mach-nix-build-python-package: nixpkgs: pythonpkgs: version
# see mbf_bam for an example

[anysnake2]
rev = "dev"

[outside_nixpkgs]
rev = "22.05" # the nixpgks version or github hash

[nixpkgs]
rev = "22.05" # the nixpgks version or github hash
packages = ["which"]


[python] # python section is optional
version="3.10" # does not go down to 3.8.x. That's implicit in the nixpkgs (for now)
ecosystem_date="2022-11-23" # you get whatever packages the solver would have produced on that day

[mach-nix]
#rev="4b9e5e087a154c9903c533848907ea077007d6ee"

[python.packages]
# just tell it to use 'useFlake' and define the flake below
dppd={method="fetchPypi"} # version is auto detected

[python.packages.scanpy] 
method = "fetchPypi"
version="1.9.3"
#pname = "scanpy"
buildPythonPackage_arguments="""
{
format="pyproject";
requirements=''
anndata>=0.7.4
numpy>=1.17.0
matplotlib>=3.4
pandas>=1.0
scipy>=1.4
seaborn
h5py>=3
tqdm
scikit-learn>=0.24
statsmodels>=0.10.0rc2
patsy
networkx>=2.3
natsort
joblib
numba>=0.41.0
umap-learn>=0.3.10
packaging
session-info
setuptools_scm # don't forget this one.
flit
'';
}
"""
"hash_1.9.3" = "sha256-3+Zfms2fTBdAB5oJn4n6akS28O917K+FJHrUr4WRRNc="

[cmd.python]
run = """python
"""


