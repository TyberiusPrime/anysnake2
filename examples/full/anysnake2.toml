# fully featured anysnake2.toml example
[anysnake2]
# We leverage nix flakes to run exactly that version.
rev = "dev" # replace with fixed version outside of tests/examples
# rev = "dev" = do not switch to fixed version, used in development.

# use_binary = true; default, optional, switches the default url. Ignored if url = is set.

# The rev must be a tag or sha-hash from the following configured url.
# url = "https://github.com/TyberiusPrime/anysnake2_release_flakes" # if you want to override this.
# (if use_binary is false, the default is  https://github.com/TyberiusPrime/anysnake2), 
# and there will be a rust build step involved.

# do_not_modify_flake = true # if set to true,
                             # flake/flake.nix is never overwritten,
							 # but stored in flake/flake.generated.nix.
							 # And nix build is called every run
							 # This is an escape hatch.

[dev_shell] # optional
    shell = "fish" # optional
	inputs = [ # optional
		# these are packages that show up only when you do 'nix develop'
		"rust-analyzer"
	]

[outside_nixpkgs]
# the nixpkgs used to run singularity and nixfmt
rev = "21.05"

[nixpkgs]
rev = "21.05" # the nixpgks version or github hash
# rev = "7e9b0dff974c89e070da1ad85713ff3c20b0ca97"
# url = "git+https://github.com/NixOS/nixpkgs" # optional
# url = "github:NixOS/nixpkgs" # prefer the github variant for then we can lookup tags.
packages = [ # use https://search.nixos.org/packages to search
	"fish",
	"netcat",
	"varscan", # unfree example
	#"docker-client"
	] # optional
allow_unfree = true # set to true to allow unfree packages from nixpkgs

[flake-util]
# the revision used by flake-util
# rev = "7e5bf3925f6fbdfaf50a2a7ca0be2879c4261d19" # optional
# url = "github:/oxalica/rust-overlay"

[mach-nix]
# the revision used by flake-util
# rev = "dc94135e31d5c90c40a00a6cbdf9330526e8153b" # optional
# url = "github:/DavHau/mach-nix"



[python] # python section is optional
version="3.8" # does not go down to 3.8.x. That's implicit in the nixpkgs (for now)
ecosystem_date="2021-10-11" # you get whatever packages the solver would have produced on that day
additional_mkpython_arguments_func = """
old: {"_"  = old."_" // {
	pandas.postInstall = ''
        touch $out//lib/python3.8/site-packages/pandas/mkpython_args_worked
	'';
	};
}
""" # must be verbatim nix code defing a function old -> new (attrSets)



[python.packages]
# you can use version specifiers from https://www.python.org/dev/peps/pep-0440/#id53
pypipegraph2=">2."
scipy=""
dppd = "editable/code"
dppd_plotnine = "editable/code"
# so we have something that has an 'entrypoint'
pypipegraph = "editable/code"
# there is also an escape hatch 
# allowing you to specify arbitrary nix sources for a mach-nixbuildPython call.
# for example from github 
# (you can leave of the sha256, and copy paste it from the output on first build)
# note that there is a problem with fetchFromGitHub
# if the repo in question is using .gitattributes to have git stamp the tarballs
# and it stamps them with a timestamp of the archive-building
# then the github tar ball's are actually not reproducable,
# and once the github cache forgets the file
# you will be with a sha256-changed error.
# which is why we *rewrite* them to fetchgit if we detect that situation
plotnine = {method = "fetchFromGitHub", owner = "has2k1", repo = "plotnine", rev = "6c82cdc20d6f81c96772da73fc07a672a0a0a6ef",  hash_6c82cdc20d6f81c96772da73fc07a672a0a0a6ef = "sha256-97zmeoI8Hsti1Qozl8K72GIy2qhtAyA3TqSvu1R2YoE="}
# mercurial example
lvr = {method = "fetchhg", url="https://hg.sr.ht/~bwe/lvr", rev="db6f0a3254fbd3939d6b6b8c6d1711e7129faba1", hash_db6f0a3254fbd3939d6b6b8c6d1711e7129faba1 = "sha256-r2yDQ4JuOAZ7oWfjat2R/5OcMi0q7BY1QCK/Z9hyeyY=" }
# pandas="<1.0"

# if you have packages that depend on other packages that you define using the 'method' method
# you unfortunatly must tell anysnake2 about it by providing a list in overrides
# like it's done for 'testrepo' (which depends on testrepo2) here.
testrepo={method="fetchFromGitHub", owner="TyberiusPrime", repo="_anysnake2_test_repo", overrides = ["testrepo2"], rev = "97d57e17c1bd4a5f547fa1c1be57c2f0a1d2ec6f", hash_97d57e17c1bd4a5f547fa1c1be57c2f0a1d2ec6f = "sha256-mZw37fLouWrA2L+49UOfUsF1MDy/q5pJImw+zczE4wU=" }
testrepo2={method="fetchFromGitHub", owner="TyberiusPrime", repo="_anysnake2_test_repo2", rev = "a42420f8ba0a6bc9bda0425cd665515fb92dc2b4", hash_a42420f8ba0a6bc9bda0425cd665515fb92dc2b4 = "sha256-tLz9vDTxQqFZPKkkBOZmmNNEhtf6JK2nwWiBKNH6od8="}


# a (complicated) example on how to use a python package from pypi.
# ideally, ,you'd only need
# scanpy = {method = "fetchPypi", version="1.9.3"}
# but machnix has trouble inspecting pyproject.toml projects,
# so we have to tell it the requiremenths, repeat the pname 
# on the outside options, etc.
# [python.packages.scanpy] 
# method = "fetchPypi"
# version="1.9.3"
# buildPythonPackage_arguments="""
# {
# format="pyproject";
# pname = "scanpy";
# requirements=''
# anndata>=0.7.4
# numpy>=1.17.0
# matplotlib>=3.4
# pandas>=1.0
# scipy>=1.4
# seaborn
# h5py>=3
# tqdm
# scikit-learn>=0.24
# statsmodels>=0.10.0rc2
# patsy
# networkx>=2.3
# natsort
# joblib
# numba>=0.41.0
# umap-learn>=0.3.10
# packaging
# session-info
# setuptools_scm # don't forget this one.
# flit
# '';
# }
# """
# "hash_1.9.3" = "sha256-3+Zfms2fTBdAB5oJn4n6akS28O917K+FJHrUr4WRRNc="




[clones.code] # target directory
# seperate from python packages so you can clone other stuff as well
dppd="@gh/TyberiusPrime" # one /-> github.com/TyberiusPrime/dppd
pypipegraph="@gh/TyberiusPrime" # one /-> github.com/TyberiusPrime/dppd
# you can specify an explicit revision for (initial) checkout
# two // -> github.com/TyberiusPrime/2nd_part
dppd_plotnine="@gh/TyberiusPrime/dppd_plotnine?rev=8ed7651af759f3f0b715a2fbda7bf5119f7145d7"


[R] # R section is optional
date="2021-10-27" # you must make sure that the the nixpkgs glibc used here and above in [nixpkgs] matches :(
# nixr_url= "github:TyberiusPrime/nixR" # optional
# nixr_tag= "github hash" # optional
packages = [
	"ACA",
	"Rcpp"
	]
nixr_tag = "263cce0d9cda1e6c06b8dc8afa84b4887d32255d"

# you can apply overrideAttrs to
# individual R packages, for those times you really really need to patch 'em
# see https://nixos.org/manual/nixpkgs/stable/#sec-pkg-overrideAttrs
# they take a function just like the example below
[R.override_attrs]
ACA = '''
old: {
postInstall = ''
  echo "Yes" >$out/library/ACA/override_in_place
'';
}
'''

[flakes.hello]
	url = "github:/TyberiusPrime/hello_flake" #https://nixos.wiki/wiki/Flakes#Input_schema - relative paths are tricky
	rev = "f32e7e451e9463667f6a1ddb7a662ec70d35144b" # flakes.lock tends to update unexpectedly, so we tie it down here
	# you can use an url like $ANYSNAKE2_ROOT/path/to/flake for local flakes
	# $ANYSNAKE2_ROOT will be replaced by abspath('anysnake2.toml') (or whatever your config file is)
	follows = ["nixpkgs"] # so we overwrite the flakes dependencies
	# default packages is ["defaultPackage.x86_64-linux"],
	# in which case you can ommit this entry
	 #packages = ["defaultPackage.x86_64-linux"]

[rust]
# version/rust section is optional. leave of for no rust
version = "1.55.0" # =stable. 
#i to use nightly, add to nipkgs.packages 'rust-bin.nightly."2020-01-01".default'
# rust_overlay_rev = "08de2ff90cc08e7f9523ad97e4c1653b09f703ec" #https://github.com/oxalica/rust-overlay, optional
# rust_overlay_url = "github:oxalica/rust-overlay"


[container]
#home = "$HOME/singularity_home/$USER" # where to locate the singularity home. Defaults to $HOME
dtach = true # whether to run your container wrapped in dtach https://github.com/crigler/dtach

[container.volumes_ro]
"/opt" = "/opt"

[container.volumes_rw]
# home get's special treatment, see first line
"." = "/project"
"/var/run/docker.sock" = "/var/run/docker.sock"


[env]
MBF_EXTERNAL_PREBUILD_PATH="/machine/ffs/prebuild/externals/"
MBF_EXTERNAL_HOSTNAME = "${NICE_HOSTNAME}"


[cmd.default]
run = """
echo 'run_inside'
set -x # show what we're executing
cd /project
echo 'pythonpath $PYTHONPATH'
python run.py
hello
no_such-command
"""

# the post run runs even if the run failed
post_run_inside = """
echo "post run inside - status was $ANYSNAKE_RUN_STATUS"
"""

# if this one fails, execution stops
pre_run_outside = """
echo "pre run outside"
"""

# runs independend of the sucess inside
post_run_outside = """
echo 'post run outside'
"""

[cmd.shell]
run = """fish
"""

[cmd.jupyter]
run = """
jupyter
"""
# ports are exposed by default (using host network!)

[cmd.test_R]
run = """
R -e "library(ACA); library(Rcpp); print(sessionInfo())"
"""


[cmd.test_rpy2]
run = """
python -c "import rpy2.robjects as ro; print(ro.r('.libPaths()')); ro.r('library(ACA);'); ro.r('library(Rcpp);'); print(ro.r('sessionInfo()'))"
"""

[clone_regexps]
"@gh/([^/]+)"="git+https://github.com/\\1/\\0"
"@gh/([^/]+/[^/]+)"="git+https://github.com/\\1"


